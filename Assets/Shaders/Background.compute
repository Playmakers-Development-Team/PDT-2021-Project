#include "Background.cginc"

#pragma kernel line_occlusion
[numthreads(8,8,1)]
void line_occlusion (const uint3 id : SV_DispatchThreadID)
{
    const float2 uv = pixel_to_uv(id.xy, get_output_resolution());

    const float4 input = tex2Dlod(_input, float4(uv, 0, 0));
    const float brightness = input.r;

    output[id.xy] = float4(1, 1, 1, brightness);
}

#pragma kernel displacement
[numthreads(8, 8, 1)]
void displacement (const uint3 id : SV_DispatchThreadID)
{
    const float2 resolution = get_output_resolution();
    const float2 uv = pixel_to_uv(id.xy, resolution);

    float2 displacement_value = sample_params(_tex1, uv, displacement_in[0].texture_params).rg;
    displacement_value = displacement_value * 2 - 1;
    displacement_value *= displacement_in[0].amount;

    output[id.xy] = tex2Dlod(_input, float4(uv + displacement_value, 0, 0)); 
}

#pragma kernel opacity_extraction
[numthreads(8, 8, 1)]
void opacity_extraction (const uint3 id : SV_DispatchThreadID)
{
    const float2 resolution = get_output_resolution();
    const float2 uv = pixel_to_uv(id.xy, resolution);

    const float4 samp = tex2Dlod(_input, float4(uv, 0, 0));
    float opacity = saturate(1.0 - (samp.r + samp.g + samp.b) / 3.0);
    if (opacity > 0)
        opacity += opacity_extraction_in[0].exposure * samp.a;
    
    output[id.xy] = float4(samp.rgb, opacity);
}

#pragma kernel edge_detection
[numthreads(8, 8, 1)]
void edge_detection (const uint3 id : SV_DispatchThreadID)
{
    const float2 resolution = get_output_resolution();
    const float2 uv = pixel_to_uv(id.xy, resolution);

    const float4 input = tex2Dlod(_input, float4(uv, 0, 0));

    for (uint i = 0; i < edge_detection_in[0].radius; i++)
    {
        for (uint j = 0; j < 9; j++)
        {
            const float2 offset = offsets[j] * (i + 1);
            const float2 offset_uv = uv + pixel_to_uv(offset, resolution);
            
            const float4 value = tex2Dlod(_input, float4(offset_uv, 0, 0));
            const float4 diff = abs(value - input);
            
            if (max(diff.r, max(diff.g, max(diff.b, diff.a))) < edge_detection_in[0].threshold)
                continue;
            
            output[id.xy] = float4(uv, 0, 1);
            return;
        }
    }
    
    output[id.xy] = 0;
}

#pragma kernel jump_flood
[numthreads(8, 8, 1)]
void jump_flood (const uint3 id : SV_DispatchThreadID)
{
    const float2 resolution = get_output_resolution();
    const float2 uv = pixel_to_uv(id.xy, resolution);

    float4 final_value = 0;
    float max_dist = 1;

    for (int i = 0; i < 9; i++)
    {
        const float2 offset = offsets[i] * jump_flood_in[0].step_size;
        const uint2 neighbour_id = id.xy + offset;
        
        const float4 neighbour = tex2Dlod(_input, float4(pixel_to_uv(neighbour_id, resolution), 0, 0));

        if (neighbour.a <= 0)
            continue;

        const float dist = distance(neighbour.rg, uv) / root_two;

        if (dist < max_dist)
        {
            max_dist = dist;
            final_value = float4(neighbour.rg, 0, dist);
        }
    }

    output[id.xy] = final_value;
}

#pragma kernel colour_separation
[numthreads(8, 8, 1)]
void colour_separation (const uint3 id : SV_DispatchThreadID)
{
    if (output[id.xy].a == 0)
        return;
    
    const float2 resolution = get_output_resolution();
    const float2 uv = pixel_to_uv(id.xy, resolution);
    
    const float distance_field_value = smoothstep(0, .01, tex2Dlod(_tex1, float4(uv, 0, 0)).a);

    const float strength = sample_params(_tex2, uv, colour_separation_in[0].strength_params).r;

    // TODO: Implement a smoother transition...
    const float threshold = colour_separation_in[0].amount * pow(strength, 2) + 0.02;
    if (distance_field_value < threshold)
    {
        // 1 V T   0
        const float opacity = smoothstep(threshold - 0.02, threshold, distance_field_value);
        output[id.xy] = float4(output[id.xy].rgb, opacity);
    }
}

#pragma kernel opacity_shift
[numthreads(8, 8, 1)]
void opacity_shift (const uint3 id : SV_DispatchThreadID)
{
    if (output[id.xy].a == 0)
        return;
    
    const float2 resolution = get_output_resolution();
    const float2 uv = pixel_to_uv(id.xy, resolution);
    
    const float samp = sample_params(_tex1, uv, opacity_shift_in[0].strength_params).r;
    
    const float amount = opacity_shift_in[0].amount;// * (1.0 - output[id.xy].a);
    const float balance = (opacity_shift_in[0].balance + 1) * 0.5;

    const float lower = lerp(-amount, 0, balance);
    const float upper = lerp(0, amount, balance);
    
    const float offset = lerp(lower, upper, samp);

    output[id.xy] = float4(output[id.xy].rgb, output[id.xy].a + offset);
}

#pragma kernel kuwahara
[numthreads(8, 8, 1)]
void kuwahara (const uint3 id : SV_DispatchThreadID)
{
    const float2 resolution = get_output_resolution();
    const float2 uv = pixel_to_uv(id.xy, resolution);

    float2 radius = kuwahara_in[0].radius;
    
    float4 colors[4];
    float variances[4];

    const float angle = get_pixel_angle(resolution, uv);
    const float2x2 rotation_matrix = float2x2(cos(angle), -sin(angle), sin(angle), cos(angle));

    float4 range = float4(-radius.x, 0, -radius.y, 0);
    colors[0] = kuwahara_kernel(resolution, uv, range, rotation_matrix, variances[0]);

    range = float4(0, radius.x, -radius.y, 0);
    colors[1] = kuwahara_kernel(resolution, uv, range, rotation_matrix, variances[1]);

    range = float4(-radius.x, 0, 0, radius.y);
    colors[2] = kuwahara_kernel(resolution, uv, range, rotation_matrix, variances[2]);

    range = float4(0, radius.x, 0, radius.y);
    colors[3] = kuwahara_kernel(resolution, uv, range, rotation_matrix, variances[3]);

    float4 final_color = colors[0];
    float minimum_variance = variances[0];

    for (int i = 1; i < 4; i++)
    {
        if (variances[i] < minimum_variance)
        {
            final_color = colors[i];
            minimum_variance = variances[i];
        }
    }
                
    output[id.xy] = final_color;
}

#pragma kernel edge_pigment
[numthreads(8, 8, 1)]
void edge_pigment (const uint3 id : SV_DispatchThreadID)
{
    if (output[id.xy].a == 0)
        return;
    
    const float2 resolution = get_output_resolution();
    const float2 uv = pixel_to_uv(id.xy, resolution);

    const float amount = edge_pigment_in[0].amount;
    const float exponent = edge_pigment_in[0].exponent * 0.005;
    
    const float flood_value = 1.0 - tex2Dlod(_tex1, float4(uv, 0, 0)).a;
    
    const float mask_value = sample_params(_tex2, uv, edge_pigment_in[0].strength_params).r;
    
    float opacity = output[id.xy].a;
    opacity += pow(mask_value, 2) * amount * pow(abs(flood_value), 1.0 / exponent);

    output[id.xy] = float4(output[id.xy].rgb, opacity);
}

#pragma kernel bump
[numthreads(8, 8, 1)]
void bump (const uint3 id : SV_DispatchThreadID)
{
    if (output[id.xy].a == 0)
        return;
    
    const float2 resolution = get_output_resolution();
    const float2 uv = pixel_to_uv(id.xy, resolution);

    const float bump_value = sample_params(_tex2, uv, bump_in[0].bump_params).r;
    const float strength_value = sample_params(_tex3, uv, bump_in[0].strength_params).r;
    
    float opacity = output[id.xy].a;

    const float bump_mask = bump_in[0].amount * bump_value * strength_value; 
    opacity -= bump_mask;

    const float edge_mask = smoothstep(.998, 1, 1.0 - tex2Dlod(_tex1, float4(uv, 0, 0)).a) * smoothstep(.6, .9, opacity);
    opacity -= pow(edge_mask, .5) * smoothstep(.78, .8, 1.0 - bump_value) * pow(smoothstep(.5, .7, strength_value), 7);
    
    output[id.xy] = float4(output[id.xy].rgb, opacity);
}

#pragma kernel hue_shift
[numthreads(8, 8, 1)]
void hue_shift (const uint3 id : SV_DispatchThreadID)
{
    const float2 resolution = get_output_resolution();
    const float2 uv = pixel_to_uv(id.xy, resolution);
    
    const float samp = sample_params(_tex1, uv, hue_shift_in[0].strength_params).r;
    
    const float amount = 0.5 * hue_shift_in[0].amount * hue_shift_in[0].boost;
    const float balance = -hue_shift_in[0].balance;

    const float lower = amount * (1.0 - abs(clamp(balance, -1, 0)));
    const float upper = -amount * (1.0 - abs(clamp(balance, 0, 1)));
    
    const float offset = lerp(lower, upper, samp);

    float3 hsv = to_hsv(output[id.xy].rgb);
    hsv.r = (hsv.r + offset * (1.0 - hsv.b * hue_shift_in[0].value_influence)) % 1.0;
    const float4 final_value = float4(to_rgb(hsv), output[id.xy].a);
    
    output[id.xy] = final_value;
}

#pragma kernel saturation
[numthreads(8, 8, 1)]
void saturation (const uint3 id : SV_DispatchThreadID)
{
    float3 hsv = to_hsv(output[id.xy].rgb);
    hsv.g = saturate(hsv.g + saturation_in[0].amount);

    output[id.xy] = float4(to_rgb(hsv), output[id.xy].a);
}